import streamlit as st
import logging
import openai
import os
import bot

from langchain.schema import HumanMessage,SystemMessage,AIMessage
from langchain_openai import ChatOpenAI

from dotenv import load_dotenv
load_dotenv()

openai.api_key= os.getenv["OPENAI_API_KEY"]
nut_api_key = os.getenv('NUT_API_KEY') 

st.set_page_config(page_title="Fitness Bot")
st.header("Hey,it's me Lucy")


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

chat=ChatOpenAI(temperature=0.5,openai_api_key=openai.api_key)

fitnes_agent = bot.FitnessAgent(openai.api_key,nut_api_key)

def get_response(question, history):

    logger.info(f'Chat history: {history}')

    formatted_chat_history = [
        {
            'role': 'system',
            'content': 'Assistant is a large language model trained by OpenAI.\n\nAssistant is designed to be able to assist with a wide range of tasks, from answering simple questions to providing in-depth explanations and discussion on a wide range of topics. As a language model, Assistant is able to generate human-like text based on the input it receives, allowing it to engage in natural-sounding conversations and provide responses that are coherent and relevant to the topic at hand.\n\nAssistant is constantly learning and improving, and its capabilities are constantly evolving. It is able to process and understand large amounts of text, and can use this knowledge to provide accurate and informative responses to a wide range of questions. Additionally, Assistant is able to generate its own text based on the input it receives, allowing it to engage in discussions and provide explanations and descriptions on a wide range of topics.\n\nOverall, Assistant is a powerful system that can help with a wide range of tasks and provide valuable insights and information on a wide range of topics. Whether you need help with a specific question or just want to have a conversation about a particular topic, Assistant is here to assist.\n'
        }
    ]

    if history:
        for i, chat in enumerate(history[0]):
            formatted_chat_history.append({
                'role': 'user' if i % 2 == 0 else 'assistant',
                'content': chat
            })

        logger.info(formatted_chat_history)
        fitnes_agent.chat_history = formatted_chat_history

        logger.info(fitnes_agent.chat_history)

    
if 'flowmessages' not in st.session_state:
        st.session_state['flowmessages']=[
            SystemMessage(content="I am Sorry")
        ]
        
def ask(question):
        st.session_state['flowmessages'].append(HumanMessage(content=question))
        
        answer=chat(st.session_state['flowmessages'])
        
        st.session_state['flowmessages'].append(AIMessage(content=answer.content))
        return answer.content                                                        
        
    
input=st.text_input("Input: ",key="input")
response=ask(input)

submit=st.button("Ask the question")

if submit:
    st.subheader("The response is:")
    st.write(response['choices'][0]['message']['content'])
    
     
