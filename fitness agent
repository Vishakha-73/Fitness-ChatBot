import requests
import os

from dotenv import load_dotenv
load_dotenv()

nut_api_key = os.getenv('NUT_API_KEY')

class FitnessAgent:

     def get_nutritional_info(self, query: str) -> dict:
       """Fetches the nutritional information for a specific food item

       :param query: The food item to get nutritional info for
       :return: The nutritional information of the food item
       """
       api_url = 'https://api.api-ninjas.com/v1/nutrition?query={}'.format(query)
       response = requests.get(api_url, headers={'X-Api-Key': self.nut_api_key})

       if response.status_code == requests.codes.ok:
        return response.json()  # Use json instead of text for a more structured data
       else:
        return {"Error": response.status_code, "Message": response.text}



     def calculate_tdee(bmr: float, activity_level: str) -> float:
        """Calculates the Total Daily Energy Expenditure (TDEE) for a person

        :param bmr: The BMR of the person
        :param activity_level: The activity level of the person
        ('sedentary', 'lightly_active', 'moderately_active', 'very_active', 'super_active')
        :return: The TDEE of the person
        """
        activity_factors = {
        'sedentary': 1.2,
        'lightly_active': 1.375,
        'moderately_active': 1.55,
        'very_active': 1.725,
        'super_active': 1.9,
        }
        return bmr * activity_factors.get(activity_level, 1)
  
  
  
     def calculate_ibw(height: float, gender: str) -> float:
       """Calculates the Ideal Body Weight (IBW)

       :param height: The height of the person in inches
       :param gender: The gender of the person ("male" or "female")
       :return: The Ideal Body Weight in kg
       """
       if gender.lower() == 'male':
        if height <= 60:  # 5 feet = 60 inches
          return 50
        else:
            return 50 + 2.3 * (height - 60)
       elif gender.lower() == 'female':
        if height <= 60:
            return 45.5
        else:
            return 45.5 + 2.3 * (height - 60)
       else:
        raise ValueError("Invalid gender. Expected 'male' or 'female'.")
    
    
    
     def calculate_bmi(weight: float, height: float) -> float:
      """Calculates the Body Mass Index (BMI) for a person

    :param weight: The weight of the person in kg
    :param height: The height of the person in cm
    :return: The BMI of the person
    """
      height_meters = height / 100  # convert cm to meters
      bmi = weight / (height_meters ** 2)
      return round(bmi, 2)  # round to 2 decimal places for readability
